<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PFEncryptionObjects</name>
    </assembly>
    <members>
        <member name="T:PFEncryptionObjects.StringEncryptorDES">
            <summary>
            Class to encrypt and decrypt strings using the Data Encryption Standard (DES) algorithm.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.IStringEncryptor">
            <summary>
            Interface for string encryption classes that implement Microsoft symmetric encryption algorithms.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.IStringEncryptor.Decrypt(System.String)">
            <summary>
            Decrypts string that was encrypted using the Advanced Encryption Standard (AES) algorithm.
            </summary>
            <param name="encryptedString">
            String to be decrypted.
            </param>
            <returns>
            Returns the decrypted string.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.IStringEncryptor.Encrypt(System.String)">
            <summary>
            Encrypts string using a symmetric algorithm.
            </summary>
            <param name="stringToEncrypt">
            String to be encrypted.
            </param>
            <returns>
            Returns the encrypted string.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.IStringEncryptor.Encrypt(System.String,System.String)">
            <summary>
            Encrypts string using a symmetric algorithm and then saves the encrypted string to a file.
            </summary>
            <param name="stringToEncrypt">
            String to be encrypted.
            </param>
            <param name="encryptedOutputFile">
            Full path of the file to which the encrypted string will be saved.
            </param>
            <returns>
            Returns the encrypted string.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.IStringEncryptor.ResetToDefaults">
            <summary>
            Resets Key and Iv properties to their default values.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.IStringEncryptor.KeyIsValid(System.String)">
            <summary>
            Verifies the key is a valid size.
            </summary>
            <param name="keyString">
            String containing the Key to be validated.
            </param>
            <returns>
            True if key is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.IStringEncryptor.IVIsValid(System.String)">
            <summary>
            Verifies the IV (initialization vector) is a valid block size.
            </summary>
            <param name="ivString">
            String containing the IV to be validated.
            </param>
            <returns>
            True if IV is a valid size; otherwise False.
            </returns>
        </member>
        <member name="P:PFEncryptionObjects.IStringEncryptor.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.IStringEncryptor.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm. 
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.IStringEncryptor.LegalBlockSizes">
            <summary>
            List of valid block sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.IStringEncryptor.LegalKeySizes">
            <summary>
            List of valid key sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorDES.#ctor">
            <summary>
            Constructor initializes the Key and Iv values to defaults upon object creation. 
            Use Key and Iv properties to customize values to your application's requirements.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorDES.KeyIsValid(System.String)">
            <summary>
            Verifies the key is a valid size.
            </summary>
            <param name="keyString">
            String containing the Key to be validated.
            </param>
            <returns>
            True if key is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorDES.IVIsValid(System.String)">
            <summary>
            Verifies the IV (initialization vector) is a valid block size.
            </summary>
            <param name="ivString">
            String containing the IV to be validated.
            </param>
            <returns>
            True if IV is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorDES.GetStringFromByteArray(System.Byte[])">
            <summary>
            Converts byte array to a string.
            </summary>
            <param name="bytes">
            Array of bytes to be converted.
            </param>
            <returns>
            String value containing converted byte array.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorDES.Encrypt(System.String)">
            <summary>
            Encrypts string using Data Encryption Standard (DES) algorithm.
            </summary>
            <param name="stringToEncrypt">
            String to be encrypted.
            </param>
            <returns>
            Returns the encrypted string.
            </returns>
            <remarks>
            Throws exception if string to be encryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorDES.Encrypt(System.String,System.String)">
            <summary>
            Encrypts string using the Data Encryption Standard (DES) algorithm and then saves the encrypted string to a file.
            </summary>
            <param name="stringToEncrypt">
            String to be encrypted.
            </param>
            <param name="encryptedOutputFile">
            Full path of the file to which the encrypted string will be saved.
            </param>
            <returns>
            Returns the encrypted string.
            </returns>
            <remarks>
            Throws exception if string to be encryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorDES.Decrypt(System.String)">
            <summary>
            Decrypts string that was encrypted using the Data Encryption Standard (DES) algorithm.
            </summary>
            <param name="encryptedString">
            String to be decrypted.
            </param>
            <returns>
            Returns the decrypted string.
            </returns>
            <remarks>
            Throws exception if string to be decryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorDES.ResetToDefaults">
            <summary>
            Resets Key and Iv properties to their default values.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorDES.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm. 
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorDES.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorDES.LegalKeySizes">
            <summary>
            List of valid key sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorDES.LegalBlockSizes">
            <summary>
            List of valid block sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.IFileEncryptor">
            <summary>
            Interface for file encryption classes that implement Microsoft symmetric encryption algorithms.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.IFileEncryptor.DecryptBinary(System.String,System.String)">
            <summary>
            Decrypts file by processing a data as a stream of bytes.
            </summary>
            <param name="encryptedInputFile">Full path to file containing the encrypted data.</param>
            <param name="outputFile">Full path to file that will contain decrypted data.</param>
            <returns>Returns path to output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.IFileEncryptor.Decrypt(System.String,System.String)">
            <summary>
            Decrypts by processing data as a string.
            </summary>
            <param name="encryptedInputFile">Full path to file containing the encrypted data.</param>
            <param name="outputFile">Full path to file that will contain decrypted data.</param>
            <returns>Returns path to output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.IFileEncryptor.Decrypt(System.String)">
            <summary>
            Loads contents of encryptedInputFile to string, decrypts the string and returns decrypted string to caller.
            </summary>
            <param name="encryptedInputFile">Path to file containing encrypted data.</param>
            <returns>Decrypted string.</returns>
        </member>
        <member name="M:PFEncryptionObjects.IFileEncryptor.EncryptBinary(System.String,System.String)">
            <summary>
            Encrypts the file by processing data as a stream of bytes.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <param name="encryptedOutputFile">Full path to file that will contain encrypted data.</param>
            <returns>Returns path to encrypted output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.IFileEncryptor.Encrypt(System.String,System.String)">
            <summary>
            Encrypts by processing the data to be encrypted as a string.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <param name="encryptedOutputFile">Full path to file that will contain encrypted data.</param>
            <returns>Returns path to encrypted output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.IFileEncryptor.ResetToDefaults">
            <summary>
            Resets Key and Iv properties to their default values.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.IFileEncryptor.KeyIsValid(System.String)">
            <summary>
            Verifies the key is a valid size.
            </summary>
            <param name="keyString">
            String containing the Key to be validated.
            </param>
            <returns>
            True if key is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.IFileEncryptor.IVIsValid(System.String)">
            <summary>
            Verifies the IV (initialization vector) is a valid block size.
            </summary>
            <param name="ivString">
            String containing the IV to be validated.
            </param>
            <returns>
            True if IV is a valid size; otherwise False.
            </returns>
        </member>
        <member name="P:PFEncryptionObjects.IFileEncryptor.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.IFileEncryptor.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm. 
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.IFileEncryptor.LegalBlockSizes">
            <summary>
            List of valid block sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.IFileEncryptor.LegalKeySizes">
            <summary>
            List of valid key sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.FileEncryptorTripleDES">
            <summary>
            Class to encrypt and decrypt data in files using the Triple Data Encryption Standard (TripleDES) algorithm.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorTripleDES.#ctor">
            <summary>
            Constructor initializes the Key and Iv values to defaults upon object creation. 
            Use Key and Iv properties to customize values to your application's requirements.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorTripleDES.KeyIsValid(System.String)">
            <summary>
            Verifies the key is a valid size.
            </summary>
            <param name="keyString">
            String containing the Key to be validated.
            </param>
            <returns>
            True if key is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorTripleDES.IVIsValid(System.String)">
            <summary>
            Verifies the IV (initialization vector) is a valid block size.
            </summary>
            <param name="ivString">
            String containing the IV to be validated.
            </param>
            <returns>
            True if IV is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorTripleDES.GetStringFromByteArray(System.Byte[])">
            <summary>
            Converts byte array to a string.
            </summary>
            <param name="bytes">
            Array of bytes to be converted.
            </param>
            <returns>
            String value containing converted byte array.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorTripleDES.EncryptBinary(System.String,System.String)">
            <summary>
            Encrypts using a byte array. The input file is loaded into a byte array and then encrypted and saved to the output file.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <param name="encryptedOutputFile">Full path to file that will contain encrypted data.</param>
            <returns>Returns path to encrypted output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorTripleDES.DecryptBinary(System.String,System.String)">
            <summary>
            Decrypts using a byte array. The encrypted input file is loaded into a stream and then decrypted and saved as unencrypted data to the output file.
            </summary>
            <param name="encryptedInputFile">Full path to file containing the encrypted data.</param>
            <param name="outputFile">Full path to file that will contain decrypted data.</param>
            <returns>Returns path to output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorTripleDES.Encrypt(System.String,System.String)">
            <summary>
            Encrypts by loading inputFile to a string and then encrypting the string. String is then written out as text to the encryptedOutputFile.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <param name="encryptedOutputFile">Full path to file that will contain encrypted data.</param>
            <returns>Returns path to encrypted output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorTripleDES.Decrypt(System.String,System.String)">
            <summary>
            Decrypts by loading encryptedInputFile to a string and then decrypting the string. Decrypted string is then written out as text to the outputFile.
            </summary>
            <param name="encryptedInputFile">Full path to file containing the encrypted data.</param>
            <param name="outputFile">Full path to file that will contain decrypted data.</param>
            <returns>Returns path to output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorTripleDES.Decrypt(System.String)">
            <summary>
            Loads contents of encryptedInputFile to string, decrypts the string and returns decrypted string to caller.
            </summary>
            <param name="encryptedInputFile">Path to file containing encrypted data.</param>
            <returns>Decrypted string.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorTripleDES.ResetToDefaults">
            <summary>
            Resets Key and Iv properties to their default values.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorTripleDES.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm. 
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorTripleDES.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorTripleDES.LegalKeySizes">
            <summary>
            List of valid key sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorTripleDES.LegalBlockSizes">
            <summary>
            List of valid block sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.FileEncryptorDES">
            <summary>
            Class to encrypt and decrypt data in files using the Data Encryption Standard (DES) algorithm.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorDES.#ctor">
            <summary>
            Constructor initializes the Key and Iv values to defaults upon object creation. 
            Use Key and Iv properties to customize values to your application's requirements.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorDES.KeyIsValid(System.String)">
            <summary>
            Verifies the key is a valid size.
            </summary>
            <param name="keyString">
            String containing the Key to be validated.
            </param>
            <returns>
            True if key is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorDES.IVIsValid(System.String)">
            <summary>
            Verifies the IV (initialization vector) is a valid block size.
            </summary>
            <param name="ivString">
            String containing the IV to be validated.
            </param>
            <returns>
            True if IV is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorDES.GetStringFromByteArray(System.Byte[])">
            <summary>
            Converts byte array to a string.
            </summary>
            <param name="bytes">
            Array of bytes to be converted.
            </param>
            <returns>
            String value containing converted byte array.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorDES.EncryptBinary(System.String,System.String)">
            <summary>
            Encrypts using a byte array. The input file is loaded into a byte array and then encrypted and saved to the output file.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <param name="encryptedOutputFile">Full path to file that will contain encrypted data.</param>
            <returns>Returns path to encrypted output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorDES.DecryptBinary(System.String,System.String)">
            <summary>
            Decrypts using a byte array. The encrypted input file is loaded into a stream and then decrypted and saved as unencrypted data to the output file.
            </summary>
            <param name="encryptedInputFile">Full path to file containing the encrypted data.</param>
            <param name="outputFile">Full path to file that will contain decrypted data.</param>
            <returns>Returns path to output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorDES.Encrypt(System.String,System.String)">
            <summary>
            Encrypts by loading inputFile to a string and then encrypting the string. String is then written out as text to the encryptedOutputFile.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <param name="encryptedOutputFile">Full path to file that will contain encrypted data.</param>
            <returns>Returns path to encrypted output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorDES.Decrypt(System.String,System.String)">
            <summary>
            Decrypts by loading encryptedInputFile to a string and then decrypting the string. Decrypted string is then written out as text to the outputFile.
            </summary>
            <param name="encryptedInputFile">Full path to file containing the encrypted data.</param>
            <param name="outputFile">Full path to file that will contain decrypted data.</param>
            <returns>Returns path to output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorDES.Decrypt(System.String)">
            <summary>
            Loads contents of encryptedInputFile to string, decrypts the string and returns decrypted string to caller.
            </summary>
            <param name="encryptedInputFile">Path to file containing encrypted data.</param>
            <returns>Decrypted string.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorDES.ResetToDefaults">
            <summary>
            Resets Key and Iv properties to their default values.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorDES.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm. 
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorDES.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorDES.LegalKeySizes">
            <summary>
            List of valid key sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorDES.LegalBlockSizes">
            <summary>
            List of valid block sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.StringEncryptorAES">
            <summary>
            Class to encrypt and decrypt strings using the Advanced Encryption Standard (AES) algorithm.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorAES.#ctor">
            <summary>
            Constructor initializes the Key and Iv values to defaults upon object creation. 
            Use Key and Iv properties to customize values to your application's requirements.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorAES.KeyIsValid(System.String)">
            <summary>
            Verifies the key is a valid size.
            </summary>
            <param name="keyString">
            String containing the Key to be validated.
            </param>
            <returns>
            True if key is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorAES.IVIsValid(System.String)">
            <summary>
            Verifies the IV (initialization vector) is a valid block size.
            </summary>
            <param name="ivString">
            String containing the IV to be validated.
            </param>
            <returns>
            True if IV is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorAES.GetStringFromByteArray(System.Byte[])">
            <summary>
            Converts byte array to a string.
            </summary>
            <param name="bytes">
            Array of bytes to be converted.
            </param>
            <returns>
            String value containing converted byte array.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorAES.Encrypt(System.String)">
            <summary>
            Encrypts string using Advanced Encryption Standard (AES) algorithm.
            </summary>
            <param name="stringToEncrypt">
            String to be encrypted.
            </param>
            <returns>
            Returns the encrypted string.
            </returns>
            <remarks>
            Throws exception if string to be encryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorAES.Encrypt(System.String,System.String)">
            <summary>
            Encrypts string using the Advanced Encryption Standard (AES) algorithm and then saves the encrypted string to a file.
            </summary>
            <param name="stringToEncrypt">
            String to be encrypted.
            </param>
            <param name="encryptedOutputFile">
            Full path of the file to which the encrypted string will be saved.
            </param>
            <returns>
            Returns the encrypted string.
            </returns>
            <remarks>
            Throws exception if string to be encryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorAES.Decrypt(System.String)">
            <summary>
            Decrypts string that was encrypted using the Advanced Encryption Standard (AES) algorithm.
            </summary>
            <param name="encryptedString">
            String to be decrypted.
            </param>
            <returns>
            Returns the decrypted string.
            </returns>
            <remarks>
            Throws exception if string to be decryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorAES.ResetToDefaults">
            <summary>
            Resets Key and Iv properties to their default values.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorAES.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm. 
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorAES.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorAES.LegalKeySizes">
            <summary>
            List of valid key sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorAES.LegalBlockSizes">
            <summary>
            List of valid block sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.StringEncryptorTripleDES">
            <summary>
            Class to encrypt and decrypt strings using the Triple Data Encryption Standard (Triple DES) algorithm.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorTripleDES.#ctor">
            <summary>
            Constructor initializes the Key and Iv values to defaults upon object creation. 
            Use Key and Iv properties to customize values to your application's requirements.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorTripleDES.KeyIsValid(System.String)">
            <summary>
            Verifies the key is a valid size.
            </summary>
            <param name="keyString">
            String containing the Key to be validated.
            </param>
            <returns>
            True if key is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorTripleDES.IVIsValid(System.String)">
            <summary>
            Verifies the IV (initialization vector) is a valid block size.
            </summary>
            <param name="ivString">
            String containing the IV to be validated.
            </param>
            <returns>
            True if IV is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorTripleDES.GetStringFromByteArray(System.Byte[])">
            <summary>
            Converts byte array to a string.
            </summary>
            <param name="bytes">
            Array of bytes to be converted.
            </param>
            <returns>
            String value containing converted byte array.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorTripleDES.Encrypt(System.String)">
            <summary>
            Encrypts string using the TripleDES algorithm.
            </summary>
            <param name="stringToEncrypt">
            String to be encrypted.
            </param>
            <returns>
            Returns the encrypted string.
            </returns>
            <remarks>
            Throws exception if string to be encryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorTripleDES.Encrypt(System.String,System.String)">
            <summary>
            Encrypts string using the Triple Data Encryption Standard (TripleDES) algorithm and then saves the encrypted string to a file.
            </summary>
            <param name="stringToEncrypt">
            String to be encrypted.
            </param>
            <param name="encryptedOutputFile">
            Full path of the file to which the encrypted string will be saved.
            </param>
            <returns>
            Returns the encrypted string.
            </returns>
            <remarks>
            Throws exception if string to be encryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorTripleDES.Decrypt(System.String)">
            <summary>
            Decrypts string that was encrypted using the Triple Data Encryption Standard (TripleDES) algorithm.
            </summary>
            <param name="encryptedString">
            String to be decrypted.
            </param>
            <returns>
            Returns the decrypted string.
            </returns>
            <remarks>
            Throws exception if string to be decryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.StringEncryptorTripleDES.ResetToDefaults">
            <summary>
            Resets Key and Iv properties to their default values.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorTripleDES.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm. 
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorTripleDES.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorTripleDES.LegalKeySizes">
            <summary>
            List of valid key sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.StringEncryptorTripleDES.LegalBlockSizes">
            <summary>
            List of valid block sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.FileEncryptorAES">
            <summary>
            Class to encrypt and decrypt data in files using the Advanced Encryption Standard (AES) algorithm.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorAES.#ctor">
            <summary>
            Constructor initializes the Key and Iv values to defaults upon object creation. 
            Use Key and Iv properties to customize values to your application's requirements.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorAES.KeyIsValid(System.String)">
            <summary>
            Verifies the key is a valid size.
            </summary>
            <param name="keyString">
            String containing the Key to be validated.
            </param>
            <returns>
            True if key is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorAES.IVIsValid(System.String)">
            <summary>
            Verifies the IV (initialization vector) is a valid block size.
            </summary>
            <param name="ivString">
            String containing the IV to be validated.
            </param>
            <returns>
            True if IV is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorAES.GetStringFromByteArray(System.Byte[])">
            <summary>
            Converts byte array to a string.
            </summary>
            <param name="bytes">
            Array of bytes to be converted.
            </param>
            <returns>
            String value containing converted byte array.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorAES.EncryptBinary(System.String,System.String)">
            <summary>
            Encrypts using a byte array. The input file is loaded into a byte array and then encrypted and saved to the output file.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <param name="encryptedOutputFile">Full path to file that will contain encrypted data.</param>
            <returns>Returns path to encrypted output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorAES.DecryptBinary(System.String,System.String)">
            <summary>
            Decrypts using a byte array. The encrypted input file is loaded into a stream and then decrypted and saved as unencrypted data to the output file.
            </summary>
            <param name="encryptedInputFile">Full path to file containing the encrypted data.</param>
            <param name="outputFile">Full path to file that will contain decrypted data.</param>
            <returns>Returns path to output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorAES.Encrypt(System.String,System.String)">
            <summary>
            Encrypts by loading inputFile to a string and then encrypting the string. String is then written out as text to the encryptedOutputFile.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <param name="encryptedOutputFile">Full path to file that will contain encrypted data.</param>
            <returns>Returns path to encrypted output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorAES.Decrypt(System.String,System.String)">
            <summary>
            Decrypts by loading encryptedInputFile to a string and then decrypting the string. Decrypted string is then written out as text to the outputFile.
            </summary>
            <param name="encryptedInputFile">Full path to file containing the encrypted data.</param>
            <param name="outputFile">Full path to file that will contain decrypted data.</param>
            <returns>Returns path to output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorAES.Decrypt(System.String)">
            <summary>
            Loads contents of encryptedInputFile to string, decrypts the string and returns decrypted string to caller.
            </summary>
            <param name="encryptedInputFile">Path to file containing encrypted data.</param>
            <returns>Decrypted string.</returns>
        </member>
        <member name="M:PFEncryptionObjects.FileEncryptorAES.ResetToDefaults">
            <summary>
            Resets Key and Iv properties to their default values.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorAES.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm. 
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorAES.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorAES.LegalKeySizes">
            <summary>
            List of valid key sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.FileEncryptorAES.LegalBlockSizes">
            <summary>
            List of valid block sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.pfEncryptionAlgorithm">
            <summary>
            Supported encryption algorithms.
            </summary>
        </member>
        <member name="F:PFEncryptionObjects.pfEncryptionAlgorithm.NotSpecified">
            <summary>
            Encryption algorithm has not been set.
            </summary>
        </member>
        <member name="F:PFEncryptionObjects.pfEncryptionAlgorithm.DES">
            <summary>
            Data Encryption Standard.
            </summary>
        </member>
        <member name="F:PFEncryptionObjects.pfEncryptionAlgorithm.TripleDES">
            <summary>
            Triple Data Encryption Standard.
            </summary>
        </member>
        <member name="F:PFEncryptionObjects.pfEncryptionAlgorithm.AES">
            <summary>
            Advanced Encryption Standard.
            </summary>
        </member>
        <member name="F:PFEncryptionObjects.pfEncryptionAlgorithm.Invalid">
            <summary>
            Invalid or not supported encryption standard.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.pfLegalKeySize">
            <summary>
            Defines a legal key size.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.pfLegalKeySize.#ctor(System.Int32,System.Int32)">
            <summary>
            Legal key size struct constructor.
            </summary>
            <param name="min">Smallest key size allowed.</param>
            <param name="max">Largest key size allowed.</param>
        </member>
        <member name="F:PFEncryptionObjects.pfLegalKeySize.MinKeySize">
            <summary>
            Smallest key size allowed.
            </summary>
        </member>
        <member name="F:PFEncryptionObjects.pfLegalKeySize.MaxKeySize">
            <summary>
            Largest key size allowed.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.pfLegalBlockSize">
            <summary>
            Legal block size struct
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.pfLegalBlockSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Legal block size struct constructor.
            </summary>
            <param name="min">Smallest block size allowed.</param>
            <param name="max">Largest block size allowed.</param>
        </member>
        <member name="F:PFEncryptionObjects.pfLegalBlockSize.MinBlockSize">
            <summary>
            Smallest block size allowed.
            </summary>
        </member>
        <member name="F:PFEncryptionObjects.pfLegalBlockSize.MaxBlockSize">
            <summary>
            Largest block size allowed.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.pfKeyIvPair">
            <summary>
            Struct for defining key and IV combination.
            </summary>
        </member>
        <member name="F:PFEncryptionObjects.pfKeyIvPair.key">
            <summary>
            Secret Key value.
            </summary>
        </member>
        <member name="F:PFEncryptionObjects.pfKeyIvPair.IV">
            <summary>
            Initialization Vector value.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.PFFileEncoder">
            <summary>
            Class for changing the encoding of a file. 
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncoder.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncoder.EncodeFileToBase64(System.String,System.String,PFTimers.StatusTimer)">
            <summary>
            Converts file to base64 encoding.
            </summary>
            <param name="srcFile">File containing data to be encoded.</param>
            <param name="targetFile">Output file that will contain the base64 encoded data.</param>
            <param name="st">A StatusTimer object to use for timing the encode operation.</param>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncoder.DecodeFileFromBase64(System.String,System.String)">
            <summary>
            Converts a file encoded in base64 back to its original encoding.
            </summary>
            <param name="srcFile">Input from Base64 encoded data file..</param>
            <param name="targetFile">Output containing decoded data.</param>
        </member>
        <member name="E:PFEncryptionObjects.PFFileEncoder.currentStatusReport">
            <summary>
            Event that returns status information for encrypt or decrypt operation to the calling program.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFFileEncoder.StatusReportIntervalSeconds">
            <summary>
            StatusReportIntervalSeconds property
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.PFFileEncoder.StatusReportDelegate">
            <summary>
            Event delegate used for setting up callbacks that report on number of bytes and elapsed time from encoding and decoding methods.
            </summary>
            <param name="operationType">Encode or Decode.</param>
            <param name="operationState">In Progress, UserCancel, ErrorCancel or Completed.</param>
            <param name="totalBytesProcessed">Total number of bytes encoded or decoded as of current status report.</param>
            <param name="totalSeconds">Elapsed seconds since start of the encode or decode operation.</param>
            <param name="formattedElapsedTime">Elapsed time in displayable output format.</param>
            <remarks>CAUTION: Using callback status reporter from PFFileEncoder can slow down the encoding process by up to three times slower.</remarks>
        </member>
        <member name="T:PFEncryptionObjects.PFStringEncryptor">
            <summary>
            Alternative class for encryption of strings using symmetric algorithms (AES, DES, TripleDES).
            Does not use interface approach. 
            Allows logic to be concentrated in one module.cle
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.PFStringEncryptor.#ctor(PFEncryptionObjects.pfEncryptionAlgorithm)">
            <summary>
            Constructor initializes the Key and Iv values to defaults upon object creation. 
            Use Key and Iv properties to customize values to your application's requirements.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.PFStringEncryptor.KeyIsValid(System.String)">
            <summary>
            Verifies the key is a valid size.
            </summary>
            <param name="keyString">
            String containing the Key to be validated.
            </param>
            <returns>
            True if key is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.PFStringEncryptor.IVIsValid(System.String)">
            <summary>
            Verifies the IV (initialization vector) is a valid block size.
            </summary>
            <param name="ivString">
            String containing the IV to be validated.
            </param>
            <returns>
            True if IV is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.PFStringEncryptor.GetStringFromByteArray(System.Byte[])">
            <summary>
            Converts byte array to a string.
            </summary>
            <param name="bytes">
            Array of bytes to be converted.
            </param>
            <returns>
            String value containing converted byte array.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.PFStringEncryptor.Encrypt(System.String)">
            <summary>
            Encrypts string using one of the .NET symmetric crypto providers.
            </summary>
            <param name="stringToEncrypt">
            String to be encrypted.
            </param>
            <returns>
            Returns the encrypted string.
            </returns>
            <remarks>
            Throws exception if string to be encryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.PFStringEncryptor.Encrypt(System.String,System.String)">
            <summary>
            Encrypts string using one of the .NET symmetric crypto providers and then saves the encrypted string to a file.
            </summary>
            <param name="stringToEncrypt">
            String to be encrypted.
            </param>
            <param name="encryptedOutputFile">
            Full path of the file to which the encrypted string will be saved.
            </param>
            <returns>
            Returns the encrypted string.
            </returns>
            <remarks>
            Throws exception if string to be encryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.PFStringEncryptor.Decrypt(System.String)">
            <summary>
            Decrypts string that was encrypted using one of the .NET crypto providers.
            </summary>
            <param name="encryptedString">
            String to be decrypted.
            </param>
            <returns>
            Returns the decrypted string.
            </returns>
            <remarks>
            Throws exception if string to be decryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.PFStringEncryptor.Decrypt(System.String,System.String)">
            <summary>
            Decrypts string that was encrypted using one of the .NET crypto providers.
            </summary>
            <param name="encryptedString">
            String to be decrypted.
            </param>
            <param name="decryptedOutputFile">Path to file that will hold the decrypted data.</param>
            <returns>
            Returns decrypted string.
            </returns>
            <remarks>
            Throws exception if string to be decryted is null.
            Throws exception if Key or Iv values are invalid.
            </remarks>
        </member>
        <member name="M:PFEncryptionObjects.PFStringEncryptor.ResetToDefaults">
            <summary>
            Resets Key and Iv properties to their default values.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFStringEncryptor.EncryptionAlgorithm">
            <summary>
            Encryption algorithm used by this instance of the class.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFStringEncryptor.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm. 
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFStringEncryptor.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFStringEncryptor.LegalKeySizes">
            <summary>
            List of valid key sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFStringEncryptor.LegalBlockSizes">
            <summary>
            List of valid block sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.PFFileEncryptor">
            <summary>
            Class for encryption of files using symmetric algorithms (AES, DES, TripleDES).
            Does not use interface approach. 
            Allows logic to be concentrated in one module.cle
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.#ctor(PFEncryptionObjects.pfEncryptionAlgorithm)">
            <summary>
            Constructor initializes the Key and Iv values to defaults upon object creation. 
            Use Key and Iv properties to customize values to your application's requirements.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.KeyIsValid(System.String)">
            <summary>
            Verifies the key is a valid size.
            </summary>
            <param name="keyString">
            String containing the Key to be validated.
            </param>
            <returns>
            True if key is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.IVIsValid(System.String)">
            <summary>
            Verifies the IV (initialization vector) is a valid block size.
            </summary>
            <param name="ivString">
            String containing the IV to be validated.
            </param>
            <returns>
            True if IV is a valid size; otherwise False.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.GetStringFromByteArray(System.Byte[])">
            <summary>
            Converts byte array to a string.
            </summary>
            <param name="bytes">
            Array of bytes to be converted.
            </param>
            <returns>
            String value containing converted byte array.
            </returns>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.EncryptBinary(System.String,System.String,PFTimers.StatusTimer)">
            <summary>
             Encrypts using a byte array. The input file is loaded in chunks into a byte array and then encrypted and saved to the output file.
             Method uses techniques to handle cases where file being encrypted is very large. 
             This helps deal with very large files that can cause out of memory exceptions during encryption process.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <param name="encryptedOutputFile">Full path to file that will contain encrypted data.</param>
            <param name="st">A StatusTimer object to use for timing the encryption.</param>
            <returns>Returns path to encrypted output file.</returns>
            <remarks>Data is read and encrypted in chunks to relieve pressure on memory resources.</remarks>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.DecryptBinary(System.String,System.String,PFTimers.StatusTimer)">
            <summary>
             Decrypts using a byte array. The encrypted input file is loaded into a stream and then decrypted and saved as unencrypted data to the output file.
             Method uses techniques to handle cases where file being decrypted is very large. 
             This helps deal with very large files that can cause out of memory exceptions during decryption process.
            </summary>
            <param name="encryptedInputFile">Full path to file containing the encrypted data.</param>
            <param name="outputFile">Full path to file that will contain decrypted data.</param>
            <param name="st">A StatusTimer object to use for timing the decryption.</param>
            <returns>Returns path to output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.Encrypt(System.String)">
            <summary>
            Encrypts by loading inputFile to a string and then encrypting the string. String is then returned to the caller.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <returns>Returns encrypted string.</returns>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.Encrypt(System.String,System.String,PFTimers.StatusTimer)">
            <summary>
            Encrypts by loading inputFile to a string and then encrypting the string. String is then written out as text to the encryptedOutputFile.
            </summary>
            <param name="inputFile">Full path to file that will be encrypted.</param>
            <param name="encryptedOutputFile">Full path to file that will contain encrypted data.</param>
            <param name="st">A StatusTimer object to use for timing the encryption.</param>
            <returns>Returns path to encrypted output file.</returns>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.Decrypt(System.String,System.String,PFTimers.StatusTimer)">
            <summary>
            Decrypts by loading encryptedInputFile to a string and then decrypting the string. Decrypted string is then written out as text to the outputFile.
            </summary>
            <param name="encryptedInputFile">Full path to file containing the encrypted data.</param>
            <param name="outputFile">Full path to file that will contain decrypted data.</param>
            <param name="st">A StatusTimer object to use for timing the encryption.</param>
            <returns>Returns path to output file.</returns>
            <remarks>This routine assumes the encrypted data is in base64 text format.</remarks>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.Decrypt(System.String)">
            <summary>
            Loads contents of encryptedInputFile to string, decrypts the string and returns decrypted string to caller.
            </summary>
            <param name="encryptedInputFile">Path to file containing encrypted data.</param>
            <returns>Decrypted string.</returns>
        </member>
        <member name="M:PFEncryptionObjects.PFFileEncryptor.ResetToDefaults">
            <summary>
            Resets Key and Iv properties to their default values.
            </summary>
        </member>
        <member name="E:PFEncryptionObjects.PFFileEncryptor.currentStatusReport">
            <summary>
            Event that returns status information for encrypt or decrypt operation to the calling program.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFFileEncryptor.EncryptionAlgorithm">
            <summary>
            Encryption algorithm used by this instance of the class.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFFileEncryptor.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm. 
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFFileEncryptor.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFFileEncryptor.LegalKeySizes">
            <summary>
            List of valid key sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFFileEncryptor.LegalBlockSizes">
            <summary>
            List of valid block sizes for the algorithm.
            This is a read-only property.
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFFileEncryptor.BufferLengthForVeryLargeFiles">
            <summary>
            Sets the block size that will be used when routines for processing very large files (VLF) are called.
            
            </summary>
        </member>
        <member name="P:PFEncryptionObjects.PFFileEncryptor.StatusReportIntervalSeconds">
            <summary>
            StatusReportIntervalSeconds property
            </summary>
        </member>
        <member name="T:PFEncryptionObjects.PFFileEncryptor.StatusReportDelegate">
            <summary>
            Event delegate used for setting up callbacks that report on number of bytes and elapsed time from encryption and decryption methods.
            </summary>
            <param name="operationType">Encryption or Decryption.</param>
            <param name="operationState">In Progress, UserCancel, ErrorCancel or Completed.</param>
            <param name="totalBytesProcessed">Total number of bytes encrypted or decrypted as of current status report.</param>
            <param name="totalSeconds">Elapsed seconds since start of the encrypt or decrypt operation.</param>
            <param name="formattedElapsedTime">Elapsed time in displayable output format.</param>
        </member>
        <member name="T:PFEncryptionObjects.WinNtfsEncryptor">
            <summary>
            Class for encrypting and decrypting files using Windows NTFS encryption.
            Files encrypted with this method can only be read and decrypted by sessions using the logon account in effect when the file was encrypted.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.WinNtfsEncryptor.#ctor">
            <summary>
            Cosntructor.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.WinNtfsEncryptor.Encrypt(System.String)">
            <summary>
            Method to encrypt files using Windows NTFS encryption.
            </summary>
            <param name="fileToEncrypt">Path to file to be encrypted.</param>
            <remarks>Encrypts a file so that only the account used to encrypt the file can decrypt it.</remarks>
        </member>
        <member name="M:PFEncryptionObjects.WinNtfsEncryptor.Decrypt(System.String)">
            <summary>
            Method to decrypt files that were encrypted using Windows NTFS encryption.
            </summary>
            <param name="fileToDecrypt">Path to file to be decrypted.</param>
            <remarks>Decrypts a file that was encrypted by the current account using the Encrypt method.</remarks>
        </member>
        <member name="T:PFEncryptionObjects.PFEncryption">
            <summary>
            Class for creating and managing encryption objects.
            </summary>
        </member>
        <member name="M:PFEncryptionObjects.PFEncryption.GenerateKeyIvPair(PFEncryptionObjects.pfEncryptionAlgorithm)">
            <summary>
            Generate randomized Key and Iv values for symmetric encryption processing.
            </summary>
            <param name="typeEncryption">See <see cref="T:PFEncryptionObjects.pfEncryptionAlgorithm"/> for list of valid values.</param>
            <returns></returns>
        </member>
        <member name="M:PFEncryptionObjects.PFEncryption.GetEncryptionAlgorithm(System.String)">
            <summary>
            Translates text description to a pfEncryptionAlgorithm enum value.
            </summary>
            <param name="typeDescription">String specifying the name of the algorithm.</param>
            <returns></returns>
        </member>
        <member name="M:PFEncryptionObjects.PFEncryption.GetEncryptionKeyIvStringLength(PFEncryptionObjects.pfEncryptionAlgorithm)">
            <summary>
            Gets the length that an Iv value must have for the encryption algorithm specified by the method's argument.
            </summary>
            <param name="alg">Type of encryption algorithm.</param>
            <returns></returns>
        </member>
        <member name="M:PFEncryptionObjects.PFEncryption.GetStringEncryptor(PFEncryptionObjects.pfEncryptionAlgorithm)">
            <summary>
            Factory method for creating instances of the string encryptor classes.
            </summary>
            <param name="alg">Type of encryption algorithm.</param>
            <returns></returns>
        </member>
        <member name="M:PFEncryptionObjects.PFEncryption.GetFileEncryptor(PFEncryptionObjects.pfEncryptionAlgorithm)">
            <summary>
            Factory method for creating instances of file encryption objects.
            </summary>
            <param name="alg">Type of encryption algorithm.</param>
            <returns></returns>
        </member>
    </members>
</doc>
